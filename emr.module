<?php

/**
 * @file
 * Entity Meta Relation module.
 */

declare(strict_types = 1);

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Render\Element;

/**
 * Implements hook_inline_entity_form_reference_form_alter().
 */
function emr_inline_entity_form_entity_form_alter(&$reference_form, &$form_state) {

  // Hide non desirable fields for entity meta when show in inline entity form.
  if ($reference_form['#entity_type'] == 'entity_meta') {
    $reference_form['status']['#access'] = FALSE;
    $reference_form['created']['#access'] = FALSE;
    $reference_form['revision_log']['#access'] = FALSE;

    // Add a new field value that contains all relevant field keys
    // for elements that can have values.
    $emr_fields = $reference_form['#emr_fields']['#value'] ?? [];
    foreach ($reference_form as $id => $element) {
      if (is_array($element) && !Element::property($id) && Element::isVisibleElement($element)) {
        $emr_fields[] = $id;
      }
    }

    $form_state->set($reference_form['#ief_id'], $emr_fields);
  }
}

/**
 * Implements hook_entity_meta_presave().
 */
function emr_entity_meta_presave(ContentEntityInterface $entity_meta) {
  \Drupal::service('emr.manager')->presaveEntityMeta($entity_meta);
}

/**
 * Implements hook_module_implements_alter().
 */
function emr_module_implements_alter(&$implementations, $hook) {
  // Makes sure emr_entity_meta_presave() is the last executed from the chain.
  if ($hook == 'entity_meta_presave') {
    $group = $implementations['emr'];
    unset($implementations['emr']);
    $implementations['emr'] = $group;
  }
}
